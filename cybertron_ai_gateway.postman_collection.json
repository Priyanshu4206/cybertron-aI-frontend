{
  "info": {
    "_postman_id": "e8f5b3a7-8c1b-4e6a-8e1c-8b9b9b9b9b9b",
    "name": "Cybertron AI Gateway",
    "description": "Collection for testing the Cybertron AI Gateway GraphQL API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "Authentication related operations",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Register($input: UserRegistrationInput!) {\n  register(input: $input) {\n    user {\n      id\n      email\n      phoneNumber\n      displayName\n      planType\n      availableTokens\n      occupation\n      occupationDescription\n      accountPurposes\n      accountType\n      selectedPlan\n      planDuration\n      createdAt\n    }\n    requiresOTP\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"fullName\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"securePassword123\",\n    \"occupation\": \"Freelancer\",\n    \"occupationDescription\": \"Web Developer\",\n    \"accountPurposes\": [\"Content Creation\", \"Marketing\"],\n    \"accountType\": \"INDIVIDUAL\",\n    \"selectedPlan\": \"free\",\n    \"planDuration\": \"MONTHLY\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Register a new user with email and password"
          },
          "response": []
        },
        {
          "name": "Register User with Phone",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Register($input: UserRegistrationInput!) {\n  register(input: $input) {\n    user {\n      id\n      phoneNumber\n      displayName\n      planType\n      availableTokens\n      occupation\n      occupationDescription\n      accountPurposes\n      accountType\n      selectedPlan\n      planDuration\n      createdAt\n    }\n    requiresOTP\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"fullName\": \"Jane Smith\",\n    \"phoneNumber\": \"+15551234567\",\n    \"password\": \"securePassword123\",\n    \"occupation\": \"Youtuber\",\n    \"occupationDescription\": \"Tech Content Creator\",\n    \"accountPurposes\": [\"Video Production\", \"Script Writing\"],\n    \"accountType\": \"INDIVIDUAL\",\n    \"selectedPlan\": \"pro\",\n    \"planDuration\": \"YEARLY\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Register a new user with phone number and password"
          },
          "response": []
        },
        {
          "name": "Login with Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Login($input: UserLoginInput!) {\n  login(input: $input) {\n    user {\n      id\n      email\n      displayName\n      planType\n      availableTokens\n      lastLoginAt\n    }\n    requiresOTP\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"securePassword123\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Login with email and password"
          },
          "response": []
        },
        {
          "name": "Login with Phone",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Login($input: UserLoginInput!) {\n  login(input: $input) {\n    user {\n      id\n      phoneNumber\n      displayName\n      planType\n      availableTokens\n      lastLoginAt\n    }\n    requiresOTP\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"phoneNumber\": \"+15551234567\",\n    \"password\": \"securePassword123\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Login with phone number and password"
          },
          "response": []
        },
        {
          "name": "Verify OTP (Email)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation VerifyOTP($input: OTPVerificationInput!) {\n  verifyOTP(input: $input) {\n    success\n    message\n    token\n    user {\n      id\n      email\n      displayName\n    }\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"email\": \"john.doe@example.com\",\n    \"otpCode\": \"123456\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Verify OTP for email login"
          },
          "response": []
        },
        {
          "name": "Verify OTP (Phone)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation VerifyOTP($input: OTPVerificationInput!) {\n  verifyOTP(input: $input) {\n    success\n    message\n    token\n    user {\n      id\n      phoneNumber\n      displayName\n    }\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"phoneNumber\": \"+15551234567\",\n    \"otpCode\": \"123456\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Verify OTP for phone login"
          },
          "response": []
        },
        {
          "name": "Resend OTP (Email)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ResendOTP($email: String, $method: OTPMethod!) {\n  resendOTP(email: $email, method: $method)\n}",
                "variables": "{\n  \"email\": \"john.doe@example.com\",\n  \"method\": \"EMAIL\"\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Resend OTP to email"
          },
          "response": []
        },
        {
          "name": "Resend OTP (SMS)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ResendOTP($phoneNumber: String, $method: OTPMethod!) {\n  resendOTP(phoneNumber: $phoneNumber, method: $method)\n}",
                "variables": "{\n  \"phoneNumber\": \"+15551234567\",\n  \"method\": \"SMS\"\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Resend OTP to phone number"
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Logout {\n  logout\n}",
                "variables": "{}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Logout user (client-side token removal)"
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Me {\n  me {\n    id\n    email\n    phoneNumber\n    displayName\n    planType\n    availableTokens\n    totalTokensConsumed\n    occupation\n    occupationDescription\n    accountPurposes\n    accountType\n    selectedPlan\n    planDuration\n    lastLoginAt\n    createdAt\n  }\n}",
                "variables": "{}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Get current authenticated user"
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation UpdateProfile($displayName: String) {\n  updateProfile(displayName: $displayName) {\n    id\n    displayName\n    email\n    phoneNumber\n    updatedAt\n  }\n}",
                "variables": "{\n  \"displayName\": \"Updated Name\"\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Update user profile"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Content Generation",
      "description": "Content generation operations",
      "item": [
        {
          "name": "Generate Text",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation GenerateText($input: TextGenerationInput!) {\n  generateText(input: $input) {\n    text\n    tokensConsumed\n    historyId\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"prompt\": \"Write a short story about a robot learning to feel emotions.\",\n    \"maxTokens\": 500,\n    \"temperature\": 0.7\n  }\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Generate text content"
          },
          "response": []
        },
        {
          "name": "Generate Audio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation GenerateAudio($input: AudioGenerationInput!) {\n  generateAudio(input: $input) {\n    audioUrl\n    duration\n    tokensConsumed\n    historyId\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"text\": \"Hello world! This is a test of the audio generation service.\",\n    \"voice\": \"female\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Generate audio content"
          },
          "response": []
        },
        {
          "name": "Generate Video",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation GenerateVideo($input: VideoGenerationInput!) {\n  generateVideo(input: $input) {\n    videoUrl\n    duration\n    tokensConsumed\n    historyId\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"prompt\": \"A beautiful sunset over the ocean with waves crashing on the shore.\",\n    \"duration\": 10\n  }\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Generate video content"
          },
          "response": []
        }
      ]
    },
    {
      "name": "History",
      "description": "History related operations",
      "item": [
        {
          "name": "Get User History",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query MyHistory($serviceType: ServiceType, $limit: Int, $offset: Int, $startDate: String, $endDate: String) {\n  myHistory(serviceType: $serviceType, limit: $limit, offset: $offset, startDate: $startDate, endDate: $endDate) {\n    id\n    serviceType\n    input\n    output\n    tokensConsumed\n    status\n    createdAt\n  }\n}",
                "variables": "{\n  \"limit\": 10,\n  \"offset\": 0\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Get user's request history"
          },
          "response": []
        },
        {
          "name": "Get History by ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query HistoryById($id: ID!) {\n  historyById(id: $id) {\n    id\n    serviceType\n    input\n    output\n    tokensConsumed\n    status\n    errorMessage\n    metadata\n    createdAt\n  }\n}",
                "variables": "{\n  \"id\": \"{{historyId}}\"\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Get specific history entry by ID"
          },
          "response": []
        },
        {
          "name": "Filter History by Service Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query MyHistory($serviceType: ServiceType) {\n  myHistory(serviceType: $serviceType) {\n    id\n    serviceType\n    input\n    output\n    tokensConsumed\n    status\n    createdAt\n  }\n}",
                "variables": "{\n  \"serviceType\": \"text\"\n}"
              }
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            },
            "description": "Get user's request history filtered by service type"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-extract token from OTP verification response",
          "if (pm.response.code === 200) {",
          "    const jsonData = pm.response.json();",
          "    ",
          "    // Check if this is an OTP verification response with a token",
          "    if (jsonData && jsonData.data && jsonData.data.verifyOTP && jsonData.data.verifyOTP.token) {",
          "        pm.environment.set('authToken', jsonData.data.verifyOTP.token);",
          "        console.log('Auth token extracted and saved to environment');",
          "    }",
          "    ",
          "    // Save history ID if available from content generation",
          "    if (jsonData && jsonData.data) {",
          "        if (jsonData.data.generateText && jsonData.data.generateText.historyId) {",
          "            pm.environment.set('historyId', jsonData.data.generateText.historyId);",
          "        } else if (jsonData.data.generateAudio && jsonData.data.generateAudio.historyId) {",
          "            pm.environment.set('historyId', jsonData.data.generateAudio.historyId);",
          "        } else if (jsonData.data.generateVideo && jsonData.data.generateVideo.historyId) {",
          "            pm.environment.set('historyId', jsonData.data.generateVideo.historyId);",
          "        }",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000",
      "type": "string"
    }
  ]
} 
